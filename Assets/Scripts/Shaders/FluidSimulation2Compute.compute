// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateNextPositions
#pragma kernel UpdateSpatialHashingInfo
#pragma kernel SortSpatialHashingInfo
#pragma kernel UpdateSpatialHashingIndices
#pragma kernel ComputeDensity
#pragma kernel ComputePressure
#pragma kernel ComputeViscosity
#pragma kernel ApplyForcesAndCollisions

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct FluidParticleData
{
    float2 position; // 8
    float2 nextPosition; // 8
    float2 velocity; // 8
    float mass; // 4
    float density; // 4
    float nearDensity; // 4
};

static const int numOfThreads = 64;

//Buffer that will come back
RWStructuredBuffer<FluidParticleData> Particles;
RWStructuredBuffer<uint2> SpatialHashingInfo; // Vector x = particleIndex Vector Y = cellkey
RWStructuredBuffer<uint> SpatialHashingIndices;

float smoothingDensityRadius;
float collisionDamping;
float gasConstant;
float restDensity;
float deltaTime;

[numthreads(numOfThreads, 1, 1)]
void UpdateNextPositions(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    FluidParticleData particle = Particles[id.x];

    Particles[id.x].nextPosition = particle.position;
}

[numthreads(numOfThreads, 1, 1)]
void UpdateSpatialHashingInfo(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Particles[id.x].mass = 0.0f;
}

[numthreads(numOfThreads, 1, 1)]
void SortSpatialHashingInfo(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Particles[id.x].mass = 0.0f;
}

[numthreads(numOfThreads, 1, 1)]
void UpdateSpatialHashingIndices(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Particles[id.x].mass = 0.0f;
}

[numthreads(numOfThreads, 1, 1)]
void ComputeDensity(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Particles[id.x].density = 0.0f;
    Particles[id.x].nearDensity = 0.0f;
}

[numthreads(numOfThreads, 1, 1)]
void ComputePressure(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Particles[id.x].velocity = float2(0.0f, 0.0f);
}

[numthreads(numOfThreads, 1, 1)]
void ComputeViscosity(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Particles[id.x].velocity = float2(0.0f, 0.0f);
}

[numthreads(numOfThreads, 1, 1)]
void ApplyForcesAndCollisions(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Particles[id.x].position = float2(0.0f, 0.0f);
}
