// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateNextPositions
#pragma kernel UpdateSpatialHashingInfo
#pragma kernel SortSpatialHashingInfo
#pragma kernel UpdateSpatialHashingIndices
#pragma kernel ComputeDensity
#pragma kernel ComputePressure
#pragma kernel ComputeViscosity
#pragma kernel ApplyForcesAndCollisions

//Include Functions From another hlsl
#include "FluidComputeTools.hlsl" // WHY THS BREAKS

struct FluidParticleData
{
    float2 position; // 8
    float2 nextPosition; // 8
    float2 velocity; // 8
    float mass; // 4
    float density; // 4
    float nearDensity; // 4
};

struct FluidColliderData
{
    float2 center; //8
    float radius; //4
    float2 size; //8
    float3 rotation; //12
    float2 scale; //8
    int type; //4
};

static const int numOfThreads = 64;
static const uint MAX_UINT_VALUE = 4294967295;

//Buffer that will come back
RWStructuredBuffer<FluidParticleData> Particles;
RWStructuredBuffer<uint2> SpatialHashingInfo; // Vector x = particleIndex Vector Y = cellkey
RWStructuredBuffer<uint> SpatialHashingIndices;
RWStructuredBuffer<FluidColliderData> Colliders;

float smoothingDensityRadius;
float collisionDamping;
float gasConstant;
float nearDensityConstant;
float restDensity;
float gravity;
float deltaTime;
float viscosity;
float4 bounds; // MINBOUNDS X, MINBOUNDS Y, MAXBOUNDS X,MAXBOUNDS Y
float particleRadius;
int numOfParticles;
int numOfColliders;
float volumeSmoothNearDensity1;
float volumeSmoothDensity2;
float volumeSmoothNearPressure1;
float volumeSmoothPressure2;
float volumeSmoothViscosity3;

//BITONIC SORT
int numEntries;
int groupWidth;
int groupHeight;
int stepIndex;

//EACH WORK GROUP HAS 64 THREADS INSIDE OF IT
[numthreads(numOfThreads, 1, 1)]
void UpdateNextPositions(uint3 groupID : SV_GroupID,uint groupIndex : SV_GroupIndex)
{  
    uint particleId = groupID.x * numOfThreads + groupIndex;
    
    if (particleId >= (uint) numOfParticles) return;
    
    //Create a deltaTime to predict
    float predictionDeltaTime = 1.0f / 120.0f;
    
    Particles[particleId].velocity += float2(0.0f, gravity * deltaTime);
    //Predict where the particle is going to be on the next frame
    Particles[particleId].nextPosition = Particles[particleId].position + Particles[particleId].velocity * predictionDeltaTime;

}

[numthreads(numOfThreads, 1, 1)]
void UpdateSpatialHashingInfo(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    uint particleId = groupID.x * numOfThreads + groupIndex;
    
    if (particleId >= (uint) numOfParticles) return;
    
    //Restart All indices by setting all of them to the Max UINT value
    SpatialHashingIndices[particleId].x = MAX_UINT_VALUE;
    
    int2 cell = GetCellFromPosition(Particles[particleId].position, smoothingDensityRadius);
    uint key = GetKeyFromHashedCell(HashingCell(cell), numOfParticles);

    //Update the Info on the spatial hashing
    SpatialHashingInfo[particleId] = uint2(particleId, key);

}

[numthreads(128, 1, 1)]
void SortSpatialHashingInfo(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;

    uint hIndex = i & (groupWidth - 1);
    uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
    uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / (uint)2;
    uint indexRight = indexLeft + rightStepSize;

	// Exit if out of bounds (for non-power of 2 input sizes)
    if (indexRight >= (uint)numEntries) return;

    uint valueLeft = SpatialHashingInfo[indexLeft].y;
    uint valueRight = SpatialHashingInfo[indexRight].y;

	// Swap entries if value is descending
    if (valueLeft > valueRight)
    {
        uint2 temp = SpatialHashingInfo[indexLeft];
        SpatialHashingInfo[indexLeft] = SpatialHashingInfo[indexRight];
        SpatialHashingInfo[indexRight] = temp;
    }
}

[numthreads(numOfThreads, 1, 1)]
void UpdateSpatialHashingIndices(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    uint particleId = groupID.x * numOfThreads + groupIndex;
    
    if (particleId >= (uint) numOfParticles) return;
    
    uint key = SpatialHashingInfo[particleId].y;
    uint beforeKey = MAX_UINT_VALUE;
    
    if ((particleId-1) >= 0)
    {
        beforeKey = SpatialHashingInfo[particleId - 1].y;
    }
    
    if(key != beforeKey || particleId == 0)
    {
        SpatialHashingIndices[key] = particleId;
    }
}

[numthreads(numOfThreads, 1, 1)]
void ComputeDensity(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    uint particleId = groupID.x * numOfThreads + groupIndex;
    
    if (particleId >= (uint) numOfParticles) return;
    
    FluidParticleData particle = Particles[particleId];
    //Compute radius * radius to avoid computing square
    float radius2 = smoothingDensityRadius * smoothingDensityRadius;
    float density = 0.0f;
    float nearDens = 0.0f;
    const int nearCellsSize = 9;
    int2 nearCells[nearCellsSize];
    
    SelectSurroundingCells(particle.nextPosition, smoothingDensityRadius, nearCells);

    float ownInfluence = Ver_2_SmoothDensityKernel(smoothingDensityRadius, 0.0f, volumeSmoothDensity2); // dist = 0
    float ownNearInfluence = Ver_1_SmoothNearDensityKernel(smoothingDensityRadius, 0.0f, volumeSmoothNearDensity1); // dist = 0
    density += particle.mass * ownInfluence;
    nearDens += particle.mass * ownNearInfluence;
    
    for (int i = 0; i < nearCellsSize; i++)
    {
        uint key = GetKeyFromHashedCell(HashingCell(nearCells[i]),numOfParticles);
        uint index = SpatialHashingIndices[key];

        while (index < (uint)numOfParticles && SpatialHashingInfo[index].y == key)
        {

            uint neighbourIndex = SpatialHashingInfo[index].x;
            
            if(neighbourIndex != particleId)
            {
                float2 particleToOther = Particles[neighbourIndex].nextPosition - Particles[particleId].nextPosition;
                float sqrDistFromCenterToNeighbour = dot(particleToOther, particleToOther);

                if (sqrDistFromCenterToNeighbour <= radius2)
                {
                    float dist = sqrt(sqrDistFromCenterToNeighbour);
                    float influence = Ver_2_SmoothDensityKernel(smoothingDensityRadius, dist, volumeSmoothDensity2);
                    float nearInfluence = Ver_1_SmoothNearDensityKernel(smoothingDensityRadius, dist, volumeSmoothNearDensity1);
                
                    density += Particles[particleId].mass * influence;
                    nearDens += Particles[particleId].mass * nearInfluence;
                
                }
            }
            index++;
        }
    }
    density = max(density, 0.001f);
    nearDens = max(nearDens, 0.001f);
    
    Particles[particleId].density = density;
    Particles[particleId].nearDensity = nearDens;
}

[numthreads(numOfThreads, 1, 1)]
void ComputePressure(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    uint particleId = groupID.x * numOfThreads + groupIndex;
    
    if (particleId >= (uint) numOfParticles) return;
    
    FluidParticleData particle = Particles[particleId];
    //Compute radius * radius to avoid computing square
    float radius2 = smoothingDensityRadius * smoothingDensityRadius;
    float2 pressure = float2(0.0f,0.0f);
    const int nearCellsSize = 9;
    int2 nearCells[nearCellsSize];
    
    SelectSurroundingCells(particle.nextPosition, smoothingDensityRadius, nearCells);

    for (int i = 0; i < nearCellsSize; i++)
    {
        uint key = GetKeyFromHashedCell(HashingCell(nearCells[i]), numOfParticles);
        uint index = SpatialHashingIndices[key];

        while (index < (uint)numOfParticles && SpatialHashingInfo[index].y == key)
        {

            uint neighbourIndex = SpatialHashingInfo[index].x;

            if (particleId == neighbourIndex)
            {
                index++;
                continue;
            }
            
            float2 particleToOther = Particles[neighbourIndex].nextPosition - particle.nextPosition;
            float sqrDistFromCenterToNeighbour = dot(particleToOther, particleToOther);

            if (sqrDistFromCenterToNeighbour <= radius2)
            {
                
                float dist = sqrt(sqrDistFromCenterToNeighbour);
                //In which direction the particle will go
                float2 direction = dist > 0 ? particleToOther / dist : float2(0, 1);
                //How rapidly this particle will move
                float slope = Derivative_Ver_2_SmoothDensityKernel(smoothingDensityRadius, dist, volumeSmoothPressure2);
                float nearSlope = Derivative_Ver_1_SmoothNearDensityKernel(smoothingDensityRadius, dist,volumeSmoothNearPressure1);
                //Apply the force to both particles
                float pressureBetweenParticles = (ConvertDensityIntoPressure(particle.density, restDensity, gasConstant) + ConvertDensityIntoPressure(Particles[neighbourIndex].density, restDensity, gasConstant)) * 0.5f;
                float nearPressureBetweenParticles = (ConvertNearDensityIntoPressure(particle.nearDensity, nearDensityConstant) + ConvertNearDensityIntoPressure(Particles[neighbourIndex].nearDensity, nearDensityConstant)) * 0.5f;
      
                pressure += particle.mass * direction * slope * pressureBetweenParticles / Particles[neighbourIndex].density;
                pressure += direction * nearSlope * nearPressureBetweenParticles / Particles[neighbourIndex].nearDensity;
                
            }
            index++;
        }
    }
    
    float2 pressureAcceleration = float2(0.0f,0.0f);

    pressureAcceleration = pressure / particle.density;

    Particles[particleId].velocity += pressureAcceleration * deltaTime;
}

[numthreads(numOfThreads, 1, 1)]
void ComputeViscosity(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    uint particleId = groupID.x * numOfThreads + groupIndex;
    
    if (particleId >= (uint) numOfParticles) return;
    
    FluidParticleData particle = Particles[particleId];
    //Compute radius * radius to avoid computing square
    float radius2 = smoothingDensityRadius * smoothingDensityRadius;
    float2 _viscosity = float2(0.0f,0.0f);
    const int nearCellsSize = 9;
    int2 nearCells[nearCellsSize];
    
    SelectSurroundingCells(particle.nextPosition, smoothingDensityRadius, nearCells);

    for (int i = 0; i < nearCellsSize; i++)
    {
        uint key = GetKeyFromHashedCell(HashingCell(nearCells[i]), numOfParticles);
        uint index = SpatialHashingIndices[key];

        while (index < (uint) numOfParticles && SpatialHashingInfo[index].y == key)
        {

            uint neighbourIndex = SpatialHashingInfo[index].x;
            
            if (particleId == neighbourIndex)
            {
                index++;
                continue;
            }

            float2 particleToOther = Particles[neighbourIndex].nextPosition - particle.nextPosition;
            float sqrDistFromCenterToNeighbour = dot(particleToOther, particleToOther);

            if (sqrDistFromCenterToNeighbour <= radius2)
            {
                float dist = sqrt(sqrDistFromCenterToNeighbour);
                float viscInfluence = Ver_3_SmoothDensityKernel(smoothingDensityRadius, dist,volumeSmoothViscosity3);

                _viscosity = particle.mass * (Particles[neighbourIndex].velocity - particle.velocity) / Particles[neighbourIndex].density;
                _viscosity *= viscInfluence;
            }
            index++;
        }
    }
    
    Particles[particleId].velocity += _viscosity * viscosity * deltaTime;
}

void ResolveQuadCollision(inout FluidParticleData particle, FluidColliderData collider)
{

    float2 center = collider.center;

    float3 rotation = collider.rotation;
    float angle = radians(rotation.z);
    float cosAngle = cos(angle);
    float sinAngle = sin(angle);
    
    float2x2 rotationMatrix = float2x2(cosAngle, -sinAngle, sinAngle, cosAngle);
    float2x2 invRotationMatrix = float2x2(cosAngle, sinAngle, -sinAngle, cosAngle);

    // Since the axis in local space are aligned with the quad we pass the particles to quad local space
    // Apply the inv of the rotation to the particles so they are in the same local space  
    float2 localParticlePosition = mul(invRotationMatrix, (particle.position - center));
    float2 localParticleVelocity = mul(invRotationMatrix, particle.velocity);

    float2 halfSize = collider.size * 0.5;
    float2 minSizeLocal = -halfSize;
    float2 maxSizeLocal = halfSize;

    // Check if the particle is inside the rotated quad in local space
    if (localParticlePosition.x > minSizeLocal.x - particleRadius && localParticlePosition.x < maxSizeLocal.x + particleRadius &&
        localParticlePosition.y > minSizeLocal.y - particleRadius && localParticlePosition.y < maxSizeLocal.y + particleRadius)
    {
        float2 newVelocity = localParticleVelocity;
        float2 newPosition = localParticlePosition;

        float4 outDirs = float4(0, 0, 0, 0);
        outDirs.x = localParticlePosition.x - minSizeLocal.x; // LEFT
        outDirs.y = maxSizeLocal.x - localParticlePosition.x; // RIGHT
        outDirs.z = localParticlePosition.y - minSizeLocal.y; // BOTTOM
        outDirs.w = maxSizeLocal.y - localParticlePosition.y; // TOP

        //Get which side of the quad is the one closer from the particle in order to eject it out of it
        float outDist = min(min(outDirs.x, outDirs.y), min(outDirs.z, outDirs.w));

        if (outDist == outDirs.x)
        {
            newPosition.x = minSizeLocal.x - particleRadius;
            newVelocity.x = abs(localParticleVelocity.x) * collisionDamping;
        }
        else if (outDist == outDirs.y)
        {
            newPosition.x = maxSizeLocal.x + particleRadius;
            newVelocity.x = -abs(localParticleVelocity.x) * collisionDamping;
        }
        else if (outDist == outDirs.z)
        {
            newPosition.y = minSizeLocal.y - particleRadius;
            newVelocity.y = abs(localParticleVelocity.y) * collisionDamping;
        }
        else if (outDist == outDirs.w)
        {
            newPosition.y = maxSizeLocal.y + particleRadius;
            newVelocity.y = -abs(localParticleVelocity.y) * collisionDamping;
        }

        //Apply the rotation and Convert it to World Space
        float2 newVelRotated = mul(rotationMatrix, newVelocity);
        float2 newPosRotated = mul(rotationMatrix, newPosition);
        particle.velocity = newVelRotated;
        particle.position = center + newPosRotated;
    }
}

void ResolveCircleCollision(inout FluidParticleData particle, FluidColliderData collider)
{
    float2 particlePosition = particle.position;
    float2 particleVelocity = particle.velocity;

    float2 dir = particlePosition - collider.center;
    float distance = length(dir);
    float2 totalDisplacement = float2(0.0f,0.0f);

    if (distance < collider.radius + particleRadius)
    {
        dir = normalize(dir);
        float2 newPosition = collider.center + dir * (collider.radius + particleRadius);
        float2 newVelocity = particleVelocity - 2 * dot(particleVelocity, dir) * dir * collisionDamping;

        particle.position = newPosition;
        particle.velocity = newVelocity;
    }
}

[numthreads(numOfThreads, 1, 1)]
void ApplyForcesAndCollisions(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    uint particleId = groupID.x * numOfThreads + groupIndex;
    
    if (particleId >= (uint) numOfParticles) return;
    //Apply Velocity to particles
    Particles[particleId].position += Particles[particleId].velocity * deltaTime;
    
    if (numOfColliders != 0)
    {
        for (int i = 0; i < numOfColliders; ++i)
        {
            FluidColliderData collider = Colliders[i];
        
            if (collider.type == 0)  // type 0 is for circle colliders
            {
                ResolveCircleCollision(Particles[particleId], collider);
            }
            else if (collider.type == 1)  // type 1 is for quad colliders
            {
                ResolveQuadCollision(Particles[particleId], collider);
            }
        }
    }
     
    float2 particlePosition = Particles[particleId].position;
    float2 particleVelocity = Particles[particleId].velocity;

    float2 particleSize = float2(1.0f, 1.0f) * particleRadius;

    Particles[particleId].position = float2(clamp(particlePosition.x, bounds.x + particleSize.x, bounds.z - particleSize.x),
                                clamp(particlePosition.y, bounds.y + particleSize.y, bounds.w - particleSize.y));
    
    // Check collisions with the boundaries
    if (particlePosition.x < (bounds.x + particleSize.x) || particlePosition.x > (bounds.z - particleSize.x))
    {
        // Invert X velocity
        Particles[particleId].velocity.x *= -collisionDamping; // Adjust damping factor as needed

        // Update particle position immediately
        Particles[particleId].position.x += Particles[particleId].velocity.x * deltaTime;
    }

    if (particlePosition.y < (bounds.y + particleSize.y) || particlePosition.y > (bounds.w - particleSize.y))
    {
        // Invert Y velocity
        Particles[particleId].velocity.y *= -collisionDamping; // Adjust damping factor as needed

        // Update particle position immediately
        Particles[particleId].position.y += Particles[particleId].velocity.y * deltaTime;
    }
    
}


